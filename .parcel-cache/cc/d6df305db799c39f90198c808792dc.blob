var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "View", function () {
  return View;
});
class View {
  regions = {};
  constructor(parent, model) {
    this.parent = parent;
    this.model = model;
    this.bindModel();
  }
  regionsMap() {
    return {};
  }
  eventsMap() {
    return {};
  }
  bindModel() {
    this.model.on('change', () => {
      this.render();
    });
  }
  bindEvents() {
    const allEvents = this.eventsMap();
    // Convert the objects in allEvents into an array of arrays of key-value pairs
    Object.entries(allEvents).forEach(eventComposite => {
      // split the 'click:button' syntax
      const [event, element] = eventComposite[0].split(':');
      // get a list of all "element"s
      document.querySelectorAll(element).forEach(ele => {
        // attach event listner to the event with the call back function
        ele.addEventListener(event, eventComposite[1]);
      });
    });
  }
  mapRegions() {
    const regionsMap = this.regionsMap;
    for (let key in regionsMap) {
      const selector = regionsMap[key];
      this.regions[key] = this.parent.querySelector(selector);
      console.log('eree');
      console.log(this.regions);
    }
  }
  onRender() {}
  render() {
    console.log(this);
    this.parent.innerHTML = '';
    this.bindEvents();
    this.parent.insertAdjacentHTML('afterbegin', this.template());
    this.mapRegions();
    // console.log('here');
    this.onRender();
  }
}
